[{"path":"https://torfason.github.io/forlabs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 forlabs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://torfason.github.io/forlabs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Author, maintainer.","code":""},{"path":"https://torfason.github.io/forlabs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason M (2023). forlabs: Tools Working Labelled Variables. https://github.com/torfason/forlabs, https://torfason.github.io/forlabs/.","code":"@Manual{,   title = {forlabs: Tools for Working with Labelled Variables},   author = {Magnus Thor Torfason},   year = {2023},   note = {https://github.com/torfason/forlabs, https://torfason.github.io/forlabs/}, }"},{"path":[]},{"path":"https://torfason.github.io/forlabs/index.html","id":"tools-for-working-with-labelled-variables","dir":"","previous_headings":"","what":"Tools for Working with Labelled Variables","title":"Tools for Working with Labelled Variables","text":"Provides functions labelled variables (haven_labelled) correspond forcats package provides categorical variables (factor).","code":""},{"path":"https://torfason.github.io/forlabs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with Labelled Variables","text":"Use pak install development version forlabs GitHub:","code":"pak::pak(\"torfason/forlabs\")"},{"path":"https://torfason.github.io/forlabs/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Working with Labelled Variables","text":"forcats package offers extensive suite functions tailored handling factor variables effectively. package presents complementary set functions, designed specifically operate seamlessly haven_labelled vectors. functions included forlabs designed emulate functionality forcats closely possible. instance, following illustration uses lbl_count() create frequency table generated haven_labelled vector fruit, comparison can done factor variable using forcats::fct_count(): package also offers functions shifting otherwise manipulating labelled variables.","code":"library(forlabs) library(forcats)  # Count the different levels of a labelled variable lbl_count(fruit_lbl) #|> gt::gt() #> # A tibble: 5 × 3 #>       v l          n #>   <dbl> <chr>  <dbl> #> 1     1 Apple     10 #> 2     2 Banana    12 #> 3     3 Lime       9 #> 4     4 Orange    10 #> 5     5 Peach      9  # Count the different levels a factor variable fct_count(fruit_fct) #|> gt::gt() #> # A tibble: 5 × 2 #>   f          n #>   <fct>  <int> #> 1 Apple     10 #> 2 Banana    12 #> 3 Lime       9 #> 4 Orange    10 #> 5 Peach      9 # Veggies is indexed by prime number ... veggies |> lbl_count() #|> gt::gt() #> # A tibble: 5 × 3 #>       v l            n #>   <dbl> <chr>    <dbl> #> 1     2 Carrot      17 #> 2     3 Potato      10 #> 3     5 Tomato       7 #> 4     7 Cucumber     8 #> 5    11 Broccoli     8 # But can be 'densified' to be indexed by 1:n instead ... dense_veggies <- veggies |> lbl_densify() dense_veggies |> lbl_count() #|> gt::gt() #> # A tibble: 5 × 3 #>       v l            n #>   <dbl> <chr>    <dbl> #> 1     1 Carrot      17 #> 2     2 Potato      10 #> 3     3 Tomato       7 #> 4     4 Cucumber     8 #> 5     5 Broccoli     8 # And shifted to run from zero instead of 1 shifted_veggies <- veggies |> lbl_shift() shifted_veggies |> lbl_count() #|> gt::gt()   #> # A tibble: 5 × 3 #>       v l            n #>   <dbl> <chr>    <dbl> #> 1     1 Carrot      17 #> 2     2 Potato      10 #> 3     4 Tomato       7 #> 4     6 Cucumber     8 #> 5    10 Broccoli     8 # If a variable contains unlabelled values, as is the # case with exotic_veggies, the labels can be filled filled_exotic_veggies <- exotic_veggies |> lbl_fill() filled_exotic_veggies |> lbl_count() #|> gt::gt_preview(top_n=6, bottom_n=2) #> # A tibble: 18 × 3 #>        v l             n #>    <dbl> <chr>     <dbl> #>  1     2 Bokchoy       8 #>  2     3 Celeriac      4 #>  3     4 <4>           4 #>  4     5 Chayote       6 #>  5     7 Eggplant      0 #>  6     8 <8>           2 #>  7    11 Endive        3 #>  8    13 Fennel        7 #>  9    16 <16>          3 #> 10    17 Jicama        3 #> 11    19 Kohlrabi      1 #> 12    23 Okra          4 #> 13    29 Radicchio     1 #> 14    31 Rutabaga      1 #> 15    32 <32>          1 #> 16    37 Taro          1 #> 17    41 Zucchini      0 #> 18    NA <NA>          1"},{"path":"https://torfason.github.io/forlabs/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Tools for Working with Labelled Variables","text":"forlabs package, almost definition, depends labelled haven, packages together define implement core class labelled variables (haven_labelled) class. packages depend number useful packages, including dplyr, stringr, reader, possible forlabs take dependency useful packages without incurring extra installation cost, addition lightweight packages rlang, glue, vctrs tibble.","code":""},{"path":"https://torfason.github.io/forlabs/reference/forlabs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"forlabs: Tools for Working with Labelled Variables — forlabs-package","title":"forlabs: Tools for Working with Labelled Variables — forlabs-package","text":"Provides functions labelled variables (`haven_labelled`) correspond `forcats` package provides categorical variables (`factor`).","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/forlabs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"forlabs: Tools for Working with Labelled Variables — forlabs-package","text":"Maintainer: Magnus Thor Torfason m@zulutime.net","code":""},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"collection labelled vectors factors representing different fruits vegetables. See format section specifics class format variable.","code":""},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"","code":"fruit_lbl  fruit_lbl_int  fruit_lbl_chr  fruit_fct  veggies  exotic_veggies"},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"fruit_lbl labelled vector double type. includes different fruit names labels. fruit_lbl_int similar fruit_lbl, integer type. illustrates labels behave integer data. fruit_lbl_chr another variant fruit_lbl labels assigned characters instead numbers, illustrating string labels work. fruit_fct factor variant fruit dataset. helps demonstrate difference factors labelled vectors. veggies labelled vector double type labels assigned different vegetables, serving basic vegetable dataset. Rather running 1:n, values prime numbers, illustrating labelled variables flexible factors regarding underlying values behind labels. variable also var_label. exotic_veggies extension veggies exotic vegetable names labels, var_label. importantly, demonstrates different types missing values behave labelled values. Specifically: observations [7] Eggplant [41] Zucchini. eight instances unlabelled values ([4], [8], [16], [31] (corresponding label value). one instance [NA], also corresponding label.","code":""},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"variables generated illustrative example data.","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/lbl_assert_filled.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that a labelled vector is filled/dense — lbl_assert_filled","title":"Assert that a labelled vector is filled/dense — lbl_assert_filled","text":"lbl_assert_filled() asserts given labelled vector filled, .e., every value present vector data, corresponding value present value labels. labels NA value OK unless explicitly disallowed. lbl_assert_dense() asserts given labelled vector dense, .e., every value present vector data, corresponding value present value labels. NA values ignored, density applicable .","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_assert_filled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that a labelled vector is filled/dense — lbl_assert_filled","text":"","code":"lbl_assert_filled(   x,   na_unfilled_ok = TRUE,   .var.name = checkmate::vname(x),   add = NULL )  lbl_assert_dense(x, .var.name = checkmate::vname(x), add = NULL)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_assert_filled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that a labelled vector is filled/dense — lbl_assert_filled","text":"x value assert. na_unfilled_ok unlabelled NA values throw error?","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_assert_filled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that a labelled vector is filled/dense — lbl_assert_filled","text":"x unless error","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count entries in a labelled variable — lbl_count","title":"Count entries in a labelled variable — lbl_count","text":"Count entries labelled variable","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count entries in a labelled variable — lbl_count","text":"","code":"lbl_count(x, sort = FALSE, prop = FALSE, ..., include_var_label = FALSE)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count entries in a labelled variable — lbl_count","text":"x labelled variable sort TRUE, result sorted common values float top. false, result sorted order values labelled variable. prop TRUE, compute fraction marginal table. ... Currently unused include_var_label extra line included variable label ().","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count entries in a labelled variable — lbl_count","text":"tibble columns v, l, n p, prop TRUE.","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count entries in a labelled variable — lbl_count","text":"","code":"table(fruit_lbl) #> fruit_lbl #>  1  2  3  4  5  #> 10 12  9 10  9    lbl_count(fruit_lbl) #> # A tibble: 5 × 3 #>       v l          n #>   <dbl> <chr>  <dbl> #> 1     1 Apple     10 #> 2     2 Banana    12 #> 3     3 Lime       9 #> 4     4 Orange    10 #> 5     5 Peach      9   lbl_count(fruit_lbl, sort = TRUE) #> # A tibble: 5 × 3 #>       v l          n #>   <dbl> <chr>  <dbl> #> 1     2 Banana    12 #> 2     1 Apple     10 #> 3     4 Orange    10 #> 4     3 Lime       9 #> 5     5 Peach      9   lbl_count(fruit_lbl, sort = TRUE, prop = TRUE) #> # A tibble: 5 × 4 #>       v l          n     p #>   <dbl> <chr>  <dbl> <dbl> #> 1     2 Banana    12  0.24 #> 2     1 Apple     10  0.2  #> 3     4 Orange    10  0.2  #> 4     3 Lime       9  0.18 #> 5     5 Peach      9  0.18"},{"path":"https://torfason.github.io/forlabs/reference/lbl_densify.html","id":null,"dir":"Reference","previous_headings":"","what":"Densify a labelled vector — lbl_densify","title":"Densify a labelled vector — lbl_densify","text":"lbl_densify function takes labelled vector assigns new, densely-ranked integer values unique value vector. order unique values preserved. function keeps labels correctly associated respective values throughout densifying process. sub-type (typeof(x)) labelled preserved double integer, character variables (<labelled<character>>) supported densification applicable character strings.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_densify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Densify a labelled vector — lbl_densify","text":"","code":"lbl_densify(x, unlabelled = c(\"error\", \"fill\"))"},{"path":"https://torfason.github.io/forlabs/reference/lbl_densify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Densify a labelled vector — lbl_densify","text":"x labelled vector densified. unlabelled parameter determines handling unlabelled values input vector. can take two values: \"error\": Throw error unlabelled values vector. \"fill\": Fill labels unlabelled values using lbl_fill() densifying.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_densify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Densify a labelled vector — lbl_densify","text":"labelled vector length original vector, x, values replaced dense ranks. labels correctly associated respective values variable label (present) preserved.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_densify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Densify a labelled vector — lbl_densify","text":"","code":"# Densify the veggies vector   lbl_densify(veggies) #> <labelled<double>[50]>: The regular veggies are indexed by the prime numbers 2-11 #>  [1] 3 5 1 4 2 3 4 3 1 5 2 1 4 2 3 4 2 1 1 1 5 5 1 1 2 1 5 3 4 2 5 1 5 1 1 4 3 2 #> [39] 2 1 2 5 4 1 2 1 3 1 4 1 #>  #> Labels: #>  value    label #>      1   Carrot #>      2   Potato #>      3   Tomato #>      4 Cucumber #>      5 Broccoli    # Densify exotic_veggies, filling in for unlabelled values   lbl_densify(exotic_veggies, unlabelled = \"fill\") #> <labelled<double>[50]>: The exotic veggies are indexed by the prime numbers 2-41. No observations exist for indexes 7 and 41, but 8 unlabelled observations exist (for indexes 2, 8, 16 and 32), and 1 observations is NA #>  [1]  1 11  3  1 11 11  4  8  4  2  3  2 15  7  1  2  3  7  2  7  7  4  4  6  1 #> [26]  1  1 13 11  9  6 10  9  7  9  7  7  5  8  6  1  8  1 14  3  4 16 12  5  4 #>  #> Labels: #>  value     label #>      1   Bokchoy #>      2  Celeriac #>      3       <4> #>      4   Chayote #>      5  Eggplant #>      6       <8> #>      7    Endive #>      8    Fennel #>      9      <16> #>     10    Jicama #>     11  Kohlrabi #>     12      Okra #>     13 Radicchio #>     14  Rutabaga #>     15      <32> #>     16      Taro #>     17  Zucchini"},{"path":"https://torfason.github.io/forlabs/reference/lbl_drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop unused labels in a labelled vector — lbl_drop","title":"Drop unused labels in a labelled vector — lbl_drop","text":"lbl_drop function takes labelled vector removes labels associated value vector.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop unused labels in a labelled vector — lbl_drop","text":"","code":"lbl_drop(x)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop unused labels in a labelled vector — lbl_drop","text":"x labeled vector","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_drop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop unused labels in a labelled vector — lbl_drop","text":"labeled vector length x, without unused labels.","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/lbl_drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop unused labels in a labelled vector — lbl_drop","text":"","code":"# Drop unused labels in exotic_veggies   lbl_drop(exotic_veggies) #> <labelled<double>[50]>: The exotic veggies are indexed by the prime numbers 2-41. No observations exist for indexes 7 and 41, but 8 unlabelled observations exist (for indexes 2, 8, 16 and 32), and 1 observations is NA #>  [1]  2 23  4  2 23 23  5 16  5  3  4  3 37 13  2  3  4 13  3 13 13  5  5 11  2 #> [26]  2  2 31 23 17 11 19 17 13 17 13 13  8 16 11  2 16  2 32  4  5 NA 29  8  5 #>  #> Labels: #>  value     label #>      2   Bokchoy #>      3  Celeriac #>      5   Chayote #>     11    Endive #>     13    Fennel #>     17    Jicama #>     19  Kohlrabi #>     23      Okra #>     29 Radicchio #>     31  Rutabaga #>     37      Taro    # Fewer observations, fewer used labels   lbl_drop(exotic_veggies[1:10]) #> <labelled<double>[10]>: The exotic veggies are indexed by the prime numbers 2-41. No observations exist for indexes 7 and 41, but 8 unlabelled observations exist (for indexes 2, 8, 16 and 32), and 1 observations is NA #>  [1]  2 23  4  2 23 23  5 16  5  3 #>  #> Labels: #>  value    label #>      2  Bokchoy #>      3 Celeriac #>      5  Chayote #>     23     Okra"},{"path":"https://torfason.github.io/forlabs/reference/lbl_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill unlabeled values in a labeled vector — lbl_fill","title":"Fill unlabeled values in a labeled vector — lbl_fill","text":"lbl_fill function takes labeled vector creates new labels values present vector existing label.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill unlabeled values in a labeled vector — lbl_fill","text":"","code":"lbl_fill(x, fill_na = FALSE, pattern = \"<{v}>\")"},{"path":"https://torfason.github.io/forlabs/reference/lbl_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill unlabeled values in a labeled vector — lbl_fill","text":"x labeled vector fill_na NA values filled pattern glue pattern determining text new labels","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill unlabeled values in a labeled vector — lbl_fill","text":"labeled vector length x, labels values.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill unlabeled values in a labeled vector — lbl_fill","text":"","code":"# Fill the unlabelled values in the exotic_veggies example variable   lbl_fill(exotic_veggies) #> <labelled<double>[50]>: The exotic veggies are indexed by the prime numbers 2-41. No observations exist for indexes 7 and 41, but 8 unlabelled observations exist (for indexes 2, 8, 16 and 32), and 1 observations is NA #>  [1]  2 23  4  2 23 23  5 16  5  3  4  3 37 13  2  3  4 13  3 13 13  5  5 11  2 #> [26]  2  2 31 23 17 11 19 17 13 17 13 13  8 16 11  2 16  2 32  4  5 NA 29  8  5 #>  #> Labels: #>  value     label #>      2   Bokchoy #>      3  Celeriac #>      4       <4> #>      5   Chayote #>      7  Eggplant #>      8       <8> #>     11    Endive #>     13    Fennel #>     16      <16> #>     17    Jicama #>     19  Kohlrabi #>     23      Okra #>     29 Radicchio #>     31  Rutabaga #>     32      <32> #>     37      Taro #>     41  Zucchini"},{"path":"https://torfason.github.io/forlabs/reference/lbl_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode labelled variables using tilde notation — lbl_recode","title":"Recode labelled variables using tilde notation — lbl_recode","text":"Recodes labelled variables takes care recode levels value labels labels continue track underlying values. Recoding multiple values value results corresponding variable labels combined. Recoding NA results corresponding labels dropped since NA labelled standard haven_labelled variables. underlying recoding takes place using dplyr::case_match(), takes tilde formula notation.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode labelled variables using tilde notation — lbl_recode","text":"","code":"lbl_recode(.x, ..., .sep = \" / \")"},{"path":"https://torfason.github.io/forlabs/reference/lbl_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode labelled variables using tilde notation — lbl_recode","text":".x labelled vector recode. ... recode specification tilde (formula) syntax. .sep string separate labels need combined.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode labelled variables using tilde notation — lbl_recode","text":"re-coded vector.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode labelled variables using tilde notation — lbl_recode","text":"","code":"lbl_recode(fruit_lbl, 1:2 ~ 1, 3 ~ 2, 4:5 ~ 3) #> <labelled<double>[50]> #>  [1] 2 3 3 2 1 1 1 3 1 1 1 1 3 3 1 3 3 3 1 1 2 3 3 3 3 1 1 2 1 2 1 2 1 1 3 2 3 3 #> [39] 2 1 1 1 3 3 1 3 2 1 3 1 #>  #> Labels: #>  value          label #>      1 Apple / Banana #>      2           Lime #>      3 Orange / Peach lbl_recode(fruit_lbl_chr, \"d\" ~ \"z\", \"e\" ~ NA) #> <labelled<character>[50]> #>  [1] c  NA z  c  a  b  a  z  a  a  b  a  NA z  b  NA NA z  b  b  c  z  NA NA z  #> [26] b  b  c  b  c  a  c  b  a  z  c  z  z  c  a  b  b  z  NA b  NA c  a  NA a  #>  #> Labels: #>  value  label #>      a  Apple #>      b Banana #>      c   Lime #>      z Orange lbl_recode(exotic_veggies, 3:10 ~ 1, 11:20 ~ 2, 21:41 ~ 3,                            2 ~ NA, NA ~ 99) #> <labelled<double>[50]>: The exotic veggies are indexed by the prime numbers 2-41. No observations exist for indexes 7 and 41, but 8 unlabelled observations exist (for indexes 2, 8, 16 and 32), and 1 observations is NA #>  [1] NA  3  1 NA  3  3  1  2  1  1  1  1  3  2 NA  1  1  2  1  2  2  1  1  2 NA #> [26] NA NA  3  3  2  2  2  2  2  2  2  2  1  2  2 NA  2 NA  3  1  1 99  3  1  1 #>  #> Labels: #>  value                                         label #>      1                 Celeriac / Chayote / Eggplant #>      2           Endive / Fennel / Jicama / Kohlrabi #>      3 Okra / Radicchio / Rutabaga / Taro / Zucchini"},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift Levels of a Labelled Vector — lbl_shift","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"function shifts levels labelled vector left right. Unlike forcats::fct_shift() forcats package, works factors, function designed work haven's labelled vectors. Given labelled vectors can values, shifting simply increases decreases values vector, updating labels match. Shifting positive number thus shifts value rather , opposed fct_shift() works. However, maintaining compatibility, default value n -1L, meaning one-based vector gets shifted zero-based vector, often useful. Implementing rotating shift (fct_shift() ) possible, done yet. labelled<character>, rotating shifts make sense, shifting vectors currently supported.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"","code":"lbl_shift(x, n = -1L, rotate = FALSE)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"x labelled vector. n integer. Positive values shift (increasing values); negative values shift town (decreasing value). Default -1L, shift one-based label set zero-based label set. rotate logical. TRUE, perform rotating shift labels. However, feature currently implemented. Default FALSE.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"labelled object shifted labels.","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"","code":"lbl_shift(fruit_lbl) #> <labelled<double>[50]> #>  [1] 2 4 3 2 0 1 0 3 0 0 1 0 4 3 1 4 4 3 1 1 2 3 4 4 3 1 1 2 1 2 0 2 1 0 3 2 3 3 #> [39] 2 0 1 1 3 4 1 4 2 0 4 0 #>  #> Labels: #>  value  label #>      0  Apple #>      1 Banana #>      2   Lime #>      3 Orange #>      4  Peach   lbl_shift(fruit_lbl_int, 1) #> <labelled<integer>[50]> #>  [1] 4 6 5 4 2 3 2 5 2 2 3 2 6 5 3 6 6 5 3 3 4 5 6 6 5 3 3 4 3 4 2 4 3 2 5 4 5 5 #> [39] 4 2 3 3 5 6 3 6 4 2 6 2 #>  #> Labels: #>  value  label #>      2  Apple #>      3 Banana #>      4   Lime #>      5 Orange #>      6  Peach   lbl_shift(veggies, 20) #> <labelled<double>[50]>: The regular veggies are indexed by the prime numbers 2-11 #>  [1] 25 31 22 27 23 25 27 25 22 31 23 22 27 23 25 27 23 22 22 22 31 31 22 22 23 #> [26] 22 31 25 27 23 31 22 31 22 22 27 25 23 23 22 23 31 27 22 23 22 25 22 27 22 #>  #> Labels: #>  value    label #>     22   Carrot #>     23   Potato #>     25   Tomato #>     27 Cucumber #>     31 Broccoli"},{"path":"https://torfason.github.io/forlabs/reference/lbl_sort_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort value labels of a labelled variable — lbl_sort_labels","title":"Sort value labels of a labelled variable — lbl_sort_labels","text":"Sorts labels labelled variable inner representation vector ascending.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_sort_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort value labels of a labelled variable — lbl_sort_labels","text":"","code":"lbl_sort_labels(x)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_sort_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort value labels of a labelled variable — lbl_sort_labels","text":"x labelled variable.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_sort_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort value labels of a labelled variable — lbl_sort_labels","text":"labelled variable values label levels equal x, inner representation value labels ascending order.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_sort_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort value labels of a labelled variable — lbl_sort_labels","text":"","code":"lbl_sort_labels(fruit_lbl) #> <labelled<double>[50]> #>  [1] 3 5 4 3 1 2 1 4 1 1 2 1 5 4 2 5 5 4 2 2 3 4 5 5 4 2 2 3 2 3 1 3 2 1 4 3 4 4 #> [39] 3 1 2 2 4 5 2 5 3 1 5 1 #>  #> Labels: #>  value  label #>      1  Apple #>      2 Banana #>      3   Lime #>      4 Orange #>      5  Peach lbl_sort_labels(veggies) #> <labelled<double>[50]>: The regular veggies are indexed by the prime numbers 2-11 #>  [1]  5 11  2  7  3  5  7  5  2 11  3  2  7  3  5  7  3  2  2  2 11 11  2  2  3 #> [26]  2 11  5  7  3 11  2 11  2  2  7  5  3  3  2  3 11  7  2  3  2  5  2  7  2 #>  #> Labels: #>  value    label #>      2   Carrot #>      3   Potato #>      5   Tomato #>      7 Cucumber #>     11 Broccoli lbl_sort_labels(exotic_veggies) #> <labelled<double>[50]>: The exotic veggies are indexed by the prime numbers 2-41. No observations exist for indexes 7 and 41, but 8 unlabelled observations exist (for indexes 2, 8, 16 and 32), and 1 observations is NA #>  [1]  2 23  4  2 23 23  5 16  5  3  4  3 37 13  2  3  4 13  3 13 13  5  5 11  2 #> [26]  2  2 31 23 17 11 19 17 13 17 13 13  8 16 11  2 16  2 32  4  5 NA 29  8  5 #>  #> Labels: #>  value     label #>      2   Bokchoy #>      3  Celeriac #>      5   Chayote #>      7  Eggplant #>     11    Endive #>     13    Fennel #>     17    Jicama #>     19  Kohlrabi #>     23      Okra #>     29 Radicchio #>     31  Rutabaga #>     37      Taro #>     41  Zucchini"},{"path":"https://torfason.github.io/forlabs/reference/lbl_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert labelled variables to desired types — lbl_to","title":"Convert labelled variables to desired types — lbl_to","text":"Six parameters define conversion rules, values passed parameters form tidyselect column specifications. columns passed converted according conversion rules associated parameter.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert labelled variables to desired types — lbl_to","text":"","code":"lbl_to(   d,   ...,   .zapped,   .numeric,   .logical,   .char_values,   .char_labels,   .factor,   .ordered,   .unfilled = c(\"error\", \"fill\", \"na\") )"},{"path":"https://torfason.github.io/forlabs/reference/lbl_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert labelled variables to desired types — lbl_to","text":"d data.frame labelled variables. ... Reserved future use. .zapped columns specified parameter converted zapping value labels, using haven::zap_labels(), converting underlying data type underlying value vector, either integer, double, character. type checking performed, underlying type returned unchanged. .numeric Columns specified converted numeric, error underlying type numeric (.e. integer double). .logical Specifies conversion logical, error conversion possible (underlying values must numeric values must 0, 1, NA). .char_values Specifies conversion character vector containing values input variable, error underlying type character. .char_labels Specifies conversion character vector containing labels input variable, error underlying type character (done first converting factor using haven::as_factor(), character using .character()). .factor Specifies conversion factor (using haven::as_factor() conversion). .ordered Specifies conversion factor (using haven::as_factor() conversion). .unfilled switch specifying behavior input \"filled\" (see lbl_fill()). Currently \"error\" setting implemented, thus unfilled labels must filled converting.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert labelled variables to desired types — lbl_to","text":"absence .character parameter, intentional, order eliminate ambiguity character conversion handled two parameters, .char_values .char_labels. Matching column two parameters error, since result ambiguous.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert labelled variables to desired types — lbl_to","text":"","code":"d <- tibble::tibble(veggies, fruit_lbl, fruit_lbl_int, fruit_lbl_chr) lbl_to(d, .char_labels = veggies, .zapped = starts_with(\"fruit\")) #> # A tibble: 50 × 4 #>    veggies  fruit_lbl fruit_lbl_int fruit_lbl_chr #>    <chr>        <dbl>         <int> <chr>         #>  1 Tomato           3             3 c             #>  2 Broccoli         5             5 e             #>  3 Carrot           4             4 d             #>  4 Cucumber         3             3 c             #>  5 Potato           1             1 a             #>  6 Tomato           2             2 b             #>  7 Cucumber         1             1 a             #>  8 Tomato           4             4 d             #>  9 Carrot           1             1 a             #> 10 Broccoli         1             1 a             #> # ℹ 40 more rows"},{"path":"https://torfason.github.io/forlabs/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. checkmate assert_access, assert_array, assert_atomic, assert_atomic_vector, assert_character, assert_choice, assert_class, assert_complex, assert_count, assert_data_frame, assert_data_table, assert_date, assert_directory, assert_disjunct, assert_double, assert_environment, assert_factor, assert_false, assert_file, assert_flag, assert_formula, assert_function, assert_int, assert_integer, assert_integerish, assert_list, assert_logical, assert_matrix, assert_multi_class, assert_named, assert_names, assert_null, assert_number, assert_numeric, assert_os, assert_path_for_output, assert_permutation, assert_posixct, assert_r6, assert_raw, assert_scalar, assert_scalar_na, assert_set_equal, assert_string, assert_subset, assert_tibble, assert_true, assert_vector, qassert haven labelled vctrs vec_c, vec_data zmisc ll_assert_labelled, ll_labelled, ll_to_character, ll_val_labels, ll_val_labels<-, ll_var_label, ll_var_label<-","code":""}]
