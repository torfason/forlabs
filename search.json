[{"path":"https://torfason.github.io/forlabs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 forlabs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://torfason.github.io/forlabs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Author, maintainer.","code":""},{"path":"https://torfason.github.io/forlabs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason M (2023). forlabs: Tools Working Labelled Variables. https://github.com/torfason/forlabs, https://torfason.github.io/forlabs/.","code":"@Manual{,   title = {forlabs: Tools for Working with Labelled Variables},   author = {Magnus Thor Torfason},   year = {2023},   note = {https://github.com/torfason/forlabs, https://torfason.github.io/forlabs/}, }"},{"path":[]},{"path":"https://torfason.github.io/forlabs/index.html","id":"tools-for-working-with-labelled-variables","dir":"","previous_headings":"","what":"Tools for Working with Labelled Variables","title":"Tools for Working with Labelled Variables","text":"package aims labelled variables (haven_labelled) forcats package categorical variables (factor).","code":""},{"path":"https://torfason.github.io/forlabs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with Labelled Variables","text":"Use pak install development version forlabs GitHub:","code":"pak::pak(\"torfason/forlabs\")"},{"path":"https://torfason.github.io/forlabs/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Working with Labelled Variables","text":"forcats package offers extensive suite functions tailored handling factor variables effectively. package presents complementary set functions, designed specifically operate seamlessly haven_labelled vectors. functions included forlabs designed emulate functionality forcats closely possible. instance, following illustration presents frequency table generated haven_labelled vector vegetables: factor variable used equivalent forcats function instead:","code":"library(labelled) library(forlabs)  ## Generate the veggies variable, a list of 20 veggies, of five types set.seed(42) veggie_types <- c(\"Broccoli\" = 1, \"Carrot\" = 2, \"Cucumber\" = 3, \"Potato\" = 4, \"Tomato\" = 5) veggies <- labelled(rbinom(20, 5, 0.7), labels = veggie_types)  # Count the different levels lbl_count(veggies) |> gt::gt() library(forcats)  # Convert veggies to factor veggies_fct <- as_factor(veggies)  # Count the different levels fct_count(veggies_fct) |> gt::gt()"},{"path":"https://torfason.github.io/forlabs/reference/forlabs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"forlabs: Tools for Working with Labelled Variables — forlabs-package","title":"forlabs: Tools for Working with Labelled Variables — forlabs-package","text":"package aims labelled variables (haven_labelled) `forcats` package categorical variables (factors).","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/forlabs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"forlabs: Tools for Working with Labelled Variables — forlabs-package","text":"Maintainer: Magnus Thor Torfason m@zulutime.net","code":""},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"collection labelled vectors factors representing different fruits vegetables. See format section specifics class format variable.","code":""},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"","code":"fruit_lbl  fruit_lbl_int  fruit_lbl_chr  fruit_fct  veggies  exotic_veggies"},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"fruit_lbl labelled vector double type. includes different fruit names labels. fruit_lbl_int similar fruit_lbl, integer type. illustrates labels behave integer data. fruit_lbl_chr another variant fruit_lbl labels assigned characters instead numbers, illustrating string labels work. fruit_fct factor variant fruit dataset. helps demonstrate difference factors labelled vectors. veggies labelled vector double type labels assigned different vegetables, serving basic vegetable dataset. Rather running 1:n, values prime numbers, illustrating labelled variables flexible factors regarding underlying values behind labels. exotic_veggies extension veggies exotic vegetable names labels. importantly, demonstrates different types missing values behave labelled values. Specifically: observations [7] Eggplant [41] Zuchini. five instances unlabelled value [43] (corresponding label value). six instances [NA], also corresponding label.","code":""},{"path":"https://torfason.github.io/forlabs/reference/fruit_and_veggies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data Sets: Fruits and Vegetables — fruit_and_veggies","text":"variables generated illustrative example data.","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count entries in a labelled variable — lbl_count","title":"Count entries in a labelled variable — lbl_count","text":"Count entries labelled variable","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count entries in a labelled variable — lbl_count","text":"","code":"lbl_count(x, sort = FALSE, prop = FALSE)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count entries in a labelled variable — lbl_count","text":"x labelled variable sort TRUE, result sorted common values float top. false, result sorted order values labelled variable. prop TRUE, compute fraction marginal table.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count entries in a labelled variable — lbl_count","text":"tibble columns v, l, n p, prop TRUE.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count entries in a labelled variable — lbl_count","text":"","code":"set.seed(42) fruit <- labelled::labelled(   sample(c(2L, 3L, 5L, 7L, 11L), 100, TRUE, prob=c(3,3,2,5,1)),   labels = c(Apple = 2, Orange = 7, Peach = 11, Banana = 3, Lime = 5),   label = \"Some fruits\") table(fruit) #> fruit #>  2  3  5  7 11  #> 24 21 12 32 11  lbl_count(fruit) #> # A tibble: 5 × 3 #>       v l          n #>   <int> <chr>  <dbl> #> 1     2 Apple     24 #> 2     3 Banana    21 #> 3     5 Lime      12 #> 4     7 Orange    32 #> 5    11 Peach     11 lbl_count(fruit, sort = TRUE) #> # A tibble: 5 × 3 #>       v l          n #>   <int> <chr>  <dbl> #> 1     7 Orange    32 #> 2     2 Apple     24 #> 3     3 Banana    21 #> 4     5 Lime      12 #> 5    11 Peach     11 lbl_count(fruit, sort = TRUE, prop = TRUE) #> # A tibble: 5 × 4 #>       v l          n     p #>   <int> <chr>  <dbl> <dbl> #> 1     7 Orange    32  0.32 #> 2     2 Apple     24  0.24 #> 3     3 Banana    21  0.21 #> 4     5 Lime      12  0.12 #> 5    11 Peach     11  0.11"},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift Levels of a Labelled Vector — lbl_shift","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"function shifts levels labelled vector left right. Unlike forcats::fct_shift() forcats package, works factors, function designed work haven's labelled vectors. Given labelled vectors can values, shifting simply increases decreases values vector, updating labels match. Shifting positive number thus shifts value rather , opposed fct_shift() works. However, maintaining compatibility, default value n -1L, meaning one-based vector gets shifted zero-based vector, often useful. Implementing rotating shift (fct_shift() ) possible, done yet. labelled<character>, rotating shifts make sense, shifting vectors currently supported.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"","code":"lbl_shift(x, n = -1L, rotate = FALSE)"},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"x labelled vector. n integer. Positive values shift (increasing values); negative values shift town (decreasing value). Default -1L, shift one-based label set zero-based label set. rotate logical. TRUE, perform rotating shift labels. However, feature currently implemented. Default FALSE.","code":""},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"labelled object shifted labels.","code":""},{"path":[]},{"path":"https://torfason.github.io/forlabs/reference/lbl_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift Levels of a Labelled Vector — lbl_shift","text":"","code":"lbl_shift(fruit_lbl) #> <labelled<double>[50]> #>  [1] 2 4 3 2 0 1 0 3 0 0 1 0 4 3 1 4 4 3 1 1 2 3 4 4 3 1 1 2 1 2 0 2 1 0 3 2 3 3 #> [39] 2 0 1 1 3 4 1 4 2 0 4 0 #>  #> Labels: #>  value  label #>      0  Apple #>      1 Banana #>      2   Lime #>      3 Orange #>      4  Peach   lbl_shift(fruit_lbl_int, 1) #> <labelled<integer>[50]> #>  [1] 4 6 5 4 2 3 2 5 2 2 3 2 6 5 3 6 6 5 3 3 4 5 6 6 5 3 3 4 3 4 2 4 3 2 5 4 5 5 #> [39] 4 2 3 3 5 6 3 6 4 2 6 2 #>  #> Labels: #>  value  label #>      2  Apple #>      3 Banana #>      4   Lime #>      5 Orange #>      6  Peach   lbl_shift(veggies, 20) #> <labelled<double>[50]> #>  [1] 25 31 22 27 23 25 27 25 22 31 23 22 27 23 25 27 23 22 22 22 31 31 22 22 23 #> [26] 22 31 25 27 23 31 22 31 22 22 27 25 23 23 22 23 31 27 22 23 22 25 22 27 22 #>  #> Labels: #>  value    label #>     22   Carrot #>     23   Potato #>     25   Tomato #>     27 Cucumber #>     31 Broccoli"},{"path":"https://torfason.github.io/forlabs/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. forcats as_factor sjlabelled as_labelled","code":""}]
