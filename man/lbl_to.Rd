% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to.R
\name{lbl_to}
\alias{lbl_to}
\title{Convert labelled variables to desired types}
\usage{
lbl_to(
  d,
  ...,
  .zapped,
  .numeric,
  .logical,
  .char_values,
  .char_labels,
  .factor,
  .ordered,
  .unfilled = c("error", "fill", "na")
)
}
\arguments{
\item{d}{A \code{data.frame} with some \code{labelled} variables.}

\item{...}{Reserved for future use.}

\item{.zapped}{Any columns specified in this parameter are converted by
\code{zapping} the value labels, using \code{haven::zap_labels()}, converting to the
underlying data type of the underlying value vector, either \code{integer},
\code{double}, or \code{character}. No type checking is performed, as the underlying
type is returned unchanged.}

\item{.numeric}{Columns specified here are converted to \code{numeric}, with an
error if the underlying type is not \code{numeric} (i.e. \code{integer} or \code{double}).}

\item{.logical}{Specifies conversion to \code{logical}, with an error if the
conversion is not possible (underlying values must be \code{numeric} and all
values must be \code{0}, \code{1}, or \code{NA}).}

\item{.char_values}{Specifies conversion to a \code{character} vector containing
the \emph{values} of the input variable, with an error if the underlying type
is not \code{character}.}

\item{.char_labels}{Specifies conversion to a \code{character} vector containing
the \emph{labels} of the input variable, with an error if the underlying type
is not \code{character} (this is done by first converting to a factor using
\code{haven::as_factor()}, then to character using \code{as.character()}).}

\item{.factor}{Specifies conversion to \code{factor} (using \code{haven::as_factor()}
for the conversion).}

\item{.ordered}{Specifies conversion to \code{factor} (using \code{haven::as_factor()}
for the conversion).}

\item{.unfilled}{A switch specifying the behavior if the input is not
"filled" (see \code{lbl_fill()}). Currently only the "error" setting is
implemented, and thus any unfilled labels must be filled before converting.}
}
\description{
Six parameters define the conversion rules, values passed to these parameters
are in the form of \code{tidyselect} column specifications. Any columns passed
will be converted according to the conversion rules associated with that
parameter.
}
\details{
The absence of a \code{.character} parameter, is intentional, in order to
eliminate ambiguity character conversion is handled by two parameters,
\code{.char_values} and \code{.char_labels}.

Matching the same column in two parameters is an error, since the result
would be ambiguous.
}
\examples{
d <- tibble::tibble(veggies, fruit_lbl, fruit_lbl_int, fruit_lbl_chr)
lbl_to(d, .char_labels = veggies, .zapped = starts_with("fruit"))

}
