% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert.R
\name{assert_typeof}
\alias{assert_typeof}
\alias{check_typeof}
\alias{test_typeof}
\title{Verify Data Type of an Object}
\usage{
check_typeof(x, types, null.ok = FALSE)

test_typeof(x, types, null.ok = FALSE)

assert_typeof(
  x,
  types,
  null.ok = FALSE,
  .var.name = checkmate::vname(x),
  add = NULL
)
}
\arguments{
\item{x}{The object to be checked.}

\item{types}{A character vector specifying the acceptable data types.}

\item{null.ok}{A logical indicating whether NULL is an acceptable value,
default is \code{FALSE}}

\item{.var.name}{Name of the checked object to print in assertions.
Defaults to the heuristic implemented in \code{\link[checkmate:vname]{checkmate::vname()}}.}

\item{add}{Collection to store assertion messages.
See \link[checkmate:AssertCollection]{checkmate::AssertCollection}.}
}
\value{
A logical value. If the type of the object matches any of the
specified types, it returns \code{TRUE}; otherwise, it returns an error message
indicating the expected types.
}
\description{
The \code{assert_typeof()} function verifies the data type of an object, as
indicated by \code{\link[base:typeof]{base::typeof()}}. This complements \code{\link[checkmate:checkClass]{checkmate::assert_class()}},
which verifies \code{class(x)} rather than \code{typeof(x)} . Both \code{check_typeof()} and
\code{test_typeof()} serve as analogous functions, adhering to \code{checkmate}
conventions.
}
\examples{
# Check for numeric or integer
check_typeof(5, "double")
check_typeof(5L, "integer")
check_typeof(5L, c("integer", "double"))

# Returns an error message
check_typeof(5L, c("numeric"))

# Check for character or logical
check_typeof("hello", c("character", "logical"))
check_typeof(FALSE, c("character", "logical"))

}
